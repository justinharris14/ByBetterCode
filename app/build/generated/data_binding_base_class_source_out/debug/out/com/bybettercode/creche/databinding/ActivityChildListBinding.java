// Generated by view binder compiler. Do not edit!
package com.bybettercode.creche.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bybettercode.creche.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityChildListBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipCheckedIn;

  @NonNull
  public final Chip chipCheckedOut;

  @NonNull
  public final ChipGroup chipGroupFilters;

  @NonNull
  public final LinearLayout content;

  @NonNull
  public final FloatingActionButton fabAddChild;

  @NonNull
  public final RecyclerView recyclerChildren;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityChildListBinding(@NonNull CoordinatorLayout rootView, @NonNull Chip chipAll,
      @NonNull Chip chipCheckedIn, @NonNull Chip chipCheckedOut,
      @NonNull ChipGroup chipGroupFilters, @NonNull LinearLayout content,
      @NonNull FloatingActionButton fabAddChild, @NonNull RecyclerView recyclerChildren,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.chipAll = chipAll;
    this.chipCheckedIn = chipCheckedIn;
    this.chipCheckedOut = chipCheckedOut;
    this.chipGroupFilters = chipGroupFilters;
    this.content = content;
    this.fabAddChild = fabAddChild;
    this.recyclerChildren = recyclerChildren;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityChildListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityChildListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_child_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityChildListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipCheckedIn;
      Chip chipCheckedIn = ViewBindings.findChildViewById(rootView, id);
      if (chipCheckedIn == null) {
        break missingId;
      }

      id = R.id.chipCheckedOut;
      Chip chipCheckedOut = ViewBindings.findChildViewById(rootView, id);
      if (chipCheckedOut == null) {
        break missingId;
      }

      id = R.id.chipGroupFilters;
      ChipGroup chipGroupFilters = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupFilters == null) {
        break missingId;
      }

      id = R.id.content;
      LinearLayout content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.fabAddChild;
      FloatingActionButton fabAddChild = ViewBindings.findChildViewById(rootView, id);
      if (fabAddChild == null) {
        break missingId;
      }

      id = R.id.recyclerChildren;
      RecyclerView recyclerChildren = ViewBindings.findChildViewById(rootView, id);
      if (recyclerChildren == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityChildListBinding((CoordinatorLayout) rootView, chipAll, chipCheckedIn,
          chipCheckedOut, chipGroupFilters, content, fabAddChild, recyclerChildren, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
