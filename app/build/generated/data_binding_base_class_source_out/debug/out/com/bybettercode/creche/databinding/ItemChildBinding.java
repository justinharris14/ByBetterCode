// Generated by view binder compiler. Do not edit!
package com.bybettercode.creche.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bybettercode.creche.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemChildBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final TextView childAge;

  @NonNull
  public final ImageView childAvatar;

  @NonNull
  public final TextView childDob;

  @NonNull
  public final TextView childName;

  @NonNull
  public final Chip childStatus;

  private ItemChildBinding(@NonNull MaterialCardView rootView, @NonNull TextView childAge,
      @NonNull ImageView childAvatar, @NonNull TextView childDob, @NonNull TextView childName,
      @NonNull Chip childStatus) {
    this.rootView = rootView;
    this.childAge = childAge;
    this.childAvatar = childAvatar;
    this.childDob = childDob;
    this.childName = childName;
    this.childStatus = childStatus;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemChildBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemChildBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_child, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemChildBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.childAge;
      TextView childAge = ViewBindings.findChildViewById(rootView, id);
      if (childAge == null) {
        break missingId;
      }

      id = R.id.childAvatar;
      ImageView childAvatar = ViewBindings.findChildViewById(rootView, id);
      if (childAvatar == null) {
        break missingId;
      }

      id = R.id.childDob;
      TextView childDob = ViewBindings.findChildViewById(rootView, id);
      if (childDob == null) {
        break missingId;
      }

      id = R.id.childName;
      TextView childName = ViewBindings.findChildViewById(rootView, id);
      if (childName == null) {
        break missingId;
      }

      id = R.id.childStatus;
      Chip childStatus = ViewBindings.findChildViewById(rootView, id);
      if (childStatus == null) {
        break missingId;
      }

      return new ItemChildBinding((MaterialCardView) rootView, childAge, childAvatar, childDob,
          childName, childStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
